name: CHURCH-APP-CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: 
  workflow_dispatch:
  # push:
  #   branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  API_TERRAFORM_DIR: api/terraform
  PROJECT_ID: rbc-louisville-project
  SERVICE_ACCOUNT_EMAIL: deploy@rbc-louisville-project.iam.gserviceaccount.com

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  family-api-build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
        
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    
    - name: Gcloud Setup
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_email: ${{ env.SERVICE_ACCOUNT_EMAIL }}
        service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
        export_default_credentials: true
    
    - name: Build
      id: build
      run: |
        cd api/directory/family
        TAG=$(cat .version)_$GITHUB_SHA
        IMAGE_URL=gcr.io/$PROJECT_ID/family-api:$TAG
        gcloud builds submit --tag $IMAGE_URL
        echo "::set-output name=image_url::$IMAGE_URL"

  api-deploy-plan:
    runs-on: ubuntu-latest
    needs: [family-api-build]

    steps:
    - uses: actions/checkout@v2
        
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    
    - name: Gcloud Setup
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_email: ${{ env.SERVICE_ACCOUNT_EMAIL }}
        service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
        export_default_credentials: true

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.10 #0.13.4

    - name: Terraform Init
      id: init
      run: |
        cd $API_TERRAFORM_DIR
        terraform init -input=false

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    - name: Terraform Plan
      id: plan
      # if: github.event_name == 'pull_request'
      run: |
        export TF_VAR_family_api_image_url=${{ steps.build.outputs.image_url }}
        export TF_VAR_project=$PROJECT_ID
        export TF_VAR_deploy_sa_email=$SERVICE_ACCOUNT_EMAIL
        terraform plan -no-color -input=false -var-file="prod.tfvars" -out="plan.txt"
      # continue-on-error: true

    - uses: actions/upload-artifact@v2
      with: 
        name: api-deploy-plan
        path: plan.txt

  api-deploy:
    runs-on: ubuntu-latest
    needs: [api-deploy-plan]

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: api-deploy-plan
        
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    
    - name: Gcloud Setup
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ env.PROJECT_ID }}
        service_account_email: ${{ env.SERVICE_ACCOUNT_EMAIL }}
        service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
        export_default_credentials: true

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.10 #0.13.4

    - name: Terraform Init
      id: init
      run: |
        cd $API_TERRAFORM_DIR
        terraform init -input=false

    - name: Terraform Apply
      id: apply
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        terraform apply -input=false plan.txt
